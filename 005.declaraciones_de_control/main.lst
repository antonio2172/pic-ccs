CCS PCM C Compiler, Version 4.104, 5967               19-dic-19 17:48

               Filename: D:\projects\ccs\pic-course\005.declaraciones_de_control\main.lst

               ROM used: 72 words (1%)
                         Largest free fragment is 2048
               RAM used: 5 (1%) at main() level
                         8 (2%) worst case
               Stack:    2 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   02F
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #fuses HS, NOWDT, NOPROTECT, NOCPD 
.................... #use delay(clock=20000000) 
0004:  MOVLW  23
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
.................... #use fast_io(b) 
....................  
.................... void prueba() { 
.................... /* 
....................    int a = 7; 
....................    if (a % 2 == 0) { 
....................       output_high(pin_b6); 
....................    } else { 
....................       output_low(pin_b6); 
....................    } 
.................... */ 
.................... /* 
....................    char ingresado = '*'; 
....................    switch (ingresado) { 
....................       case '0': 
....................          output_low(pin_b6); 
....................          break; 
....................       case '1': 
....................          output_low(pin_b6); 
....................          break; 
....................       case '2': 
....................          output_high(pin_b6); 
....................          break; 
....................       default: 
....................          output_low(pin_b6); 
....................    } 
.................... */ 
....................    int j; 
....................    for (j = 0; j <= 10; j++) { 
0018:  CLRF   22
0019:  MOVF   22,W
001A:  SUBLW  0A
001B:  BTFSS  03.0
001C:  GOTO   02C
....................       if (j % 2 == 0) { 
001D:  MOVF   22,W
001E:  ANDLW  01
001F:  BTFSS  03.2
0020:  GOTO   026
....................          output_high(pin_b6); 
0021:  BSF    06.6
....................          delay_ms(100); 
0022:  MOVLW  64
0023:  MOVWF  23
0024:  CALL   004
....................       } else { 
0025:  GOTO   02A
....................          output_low(pin_b6); 
0026:  BCF    06.6
....................          delay_ms(100); 
0027:  MOVLW  64
0028:  MOVWF  23
0029:  CALL   004
....................       } 
....................    } 
002A:  INCF   22,F
002B:  GOTO   019
.................... } 
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   045 (RETURN)
....................  
.................... void main() { 
002F:  CLRF   04
0030:  BCF    03.7
0031:  MOVLW  1F
0032:  ANDWF  03,F
0033:  BSF    03.5
0034:  BSF    1F.0
0035:  BSF    1F.1
0036:  BSF    1F.2
0037:  BCF    1F.3
0038:  MOVLW  07
0039:  MOVWF  1C
....................    port_b_pullups(true); 
003A:  BCF    01.7
....................    set_tris_b(0); 
003B:  MOVLW  00
003C:  MOVWF  06
....................    // bucle infinito 
....................    int z = 2; 
003D:  MOVLW  02
003E:  BCF    03.5
003F:  MOVWF  21
....................    while (z < 3) { 
0040:  MOVF   21,W
0041:  SUBLW  02
0042:  BTFSS  03.0
0043:  GOTO   047
....................       prueba(); 
0044:  GOTO   018
....................       output_high(pin_b7); 
0045:  BSF    06.7
....................       // delay_ms(100); 
....................       // output_low(pin_b7); 
....................       // delay_ms(100); 
....................    } 
0046:  GOTO   040
.................... } 
....................  
0047:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
